# -*- coding: utf-8 -*-
"""cerkitaweb_st

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iIo2jYmybNbwCAgMrNeyDTUf2UvEGonE
"""

#Paso 1: Importar las bibliotecas necesarias
import streamlit as st # Este framework para el desarrollo de la interfaz de la p√°gina web
import pandas as pd # Esta biblioteca para el an√°lisis y manipulaci√≥n de datos
import geopandas as gpd # Esta biblioteca para el desarrollo de datos geoespaciales
import folium as fl # Esta bibliotca para la visualizaci√≥n del mapa interactivo
from folium.plugins import MarkerCluster # Importar MarkerCluster para ubicar los marcadores en el mapa interactivo
from streamlit_folium import st_folium # Esta biblioteca para la visualizaci√≥n del mapa interactivo

# Paso 2: Crear el codigo para personalizar el aspecto de la p√°gina web (color de fondo)
st.markdown(
    """
    <style>
    .stApp {
        background-color: #F6FFC9;
    }
    .logo {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: 100px; /* Tama√±o */
    }
    .footer {
        bottom: 10px;
        width: 50%;
        text-align: center;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Paso 2: Crear la base de datos con la informaci√≥n principal de los vendedores ambulantes con la biblioteca pandas
data = {"nombre": ["Se√±or Bigotes üçî", "Emolientando üç∂" ,"Canchitas por Samuel üçø", "Camilon üå≠", "Morocho ü´ê", "Yuquitas Do√±a Florinda üßÅ"],
        "latitud": [-12.06861017065710, -12.068331914262530, -12.068928297764060, -12.069472609783920, -12.069817505441520, -12.070277921402420],
        "longitud": [-77.07747967098570, -77.07762186092730, -77.07765117725230, -77.07767675582580, -77.07770690533130, -77.07776229079620],
        "direccion": ["Av. Universitaria 123", "Jr. Libertad 456", "Calle San Mart√≠n 789", "Av. Universitaria 123", "Jr. Libertad 456", "Calle San Mart√≠n 789"],
        "tipo_comida": ["Hamburguesas", "Emoliente", "Canchita", "Salchipapas", "Mazamorra", "Yuquitas fritas"],
        "horarios": ["Lunes a Viernes: 12:00 - 22:00", "Lunes a S√°bado: 11:00 - 20:00", "Lunes a Domingos: 15:00 - 22:00", "Lunes a Viernes: 12:00 - 22:00", "Lunes a S√°bado: 11:00 - 20:00", "Lunes a Domingos: 11:00 - 22:00"]
        }

df = pd.DataFrame(data) # Crear un DataFrame a partir del diccionario
df.to_csv('vendedores.csv', index=False) # Guardar el DataFrame en un archivo CSV

# Paso 3: Crear la primera secci√≥n de la web (mensaje de bienvenida y apartado para la subscripci√≥n al newsletter)
st.title("¬°Bienvenido a *Cerkita Web*! üòÉ")
st.write("Descubre los mejores sabores locales cerca de la **PUCP** sin complicaciones. Disfruta de aut√©ntica comida callejera en un ambiente acogedor y lleno de energ√≠a. Nuestro sitio web te ayudar√° a encontrar r√°pidamente puestos de comida ambulante, ahorr√°ndote tiempo y ofreciendo opciones para todos los bolsillos. Cada bocado cuenta una historia de tradici√≥n y pasi√≥n culinaria. ¬°Sum√©rgete en esta experiencia √∫nica!")

st.write("### ‚úÖ Suscr√≠bete a nuestro Newsletter")
st.write("¬°Mantente al tanto de nuestras promociones y novedades! Suscr√≠bete a nuestro bolet√≠n y descubre las delicias callejeras cerca de la PUCP. ¬°No te lo pierdas!")

nombre = st.text_input("Ingresa tu nombre:")
email = st.text_input("Ingresa tu correo electr√≥nico:")

if st.button("Suscribirse"):
    if email:
        try:
            df_correos = pd.read_csv('correos.csv') # Leer el archivo CSV y crear un DataFrame
            st.write("Archivo le√≠do correctamente.")
        except FileNotFoundError:
            df_correos = pd.DataFrame(columns=['correo']) # Crear un DataFrame vac√≠o
            st.write("Archivo no encontrado, creando nuevo DataFrame.")

        if email not in df_correos['correo'].values:
            nuevo_registro = pd.DataFrame([[email]], columns=['correo'])
            df_correos = pd.concat([df_correos, nuevo_registro], ignore_index=True)
            df_correos.to_csv('correos.csv', index=False) # Guardar el DataFrame en un archivo CSV
            st.success("¬°Te has suscrito exitosamente! ü§ó")
        else:
            st.warning("Ya est√°s suscrito üëçüèΩ")
    else:
        st.error("Por favor, ingresa un correo electr√≥nico v√°lido üòî")

# Paso 4: Crear la segunda secci√≥n de la web (mapa digital interactivo con las ubicaciones de los vendedores)
st.write("### CerkitaMap")
st.write("Ubica tus puestos de comida ambulantes favoritos de una manera f√°cil")

user_location = [-12.069444444444, -77.079444444444] # Ubicaci√≥n del usuario

df = pd.read_csv('vendedores.csv') # Leer el archivo CSV y crear un DataFrame

gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.longitud, df.latitud)) # Crear un GeoDataFrame a partir del DataFrame

m = fl.Map(location=[-12.069444444444, -77.079444444444], width="70%", height="70%", zoom_start=17) # Crear el mapa interactivo

fl.CircleMarker(user_location, radius=10, color='red', fill=True, fill_color='red').add_to(m) # Agregar el marcador del usuario al mapa

marker_cluster = MarkerCluster().add_to(m) # Agregar el MarkerCluster al mapa

for idx, row in df.iterrows():
    popup_text = f"<b>{row['nombre']}</b><br>{row['direccion']}<br>Comida: {row['tipo_comida']}<br>Horarios: {row['horarios']}"
    fl.Marker([row['latitud'], row['longitud']], popup=popup_text).add_to(marker_cluster) # Agregar los marcadores al MarkerCluster

st_folium(m) # Mostrar el mapa interactivo

# Paso 5: Crear la tercera secci√≥n de la web (apartado de promociones)
promociones = [
    {"titulo": "Se√±or Bigotes üçî", "descripcion": "**OFERTA EXCLUSIVA**: Mostrando la p√°gina de *Cerkita Web* obtendr√°s un 50% de descuento en toda nuestra carta de hamburguesas. Adem√°s, si compr√°s m√°s de dos hamburguesas, obtendras una botella de refrescante chicha morada totalmente **GRATIS**. ¬°No dejes pasar esta oportunidad de disfrutar üòã y ahorrar al m√°ximo ü§ë !", "imagen": "https://raw.githubusercontent.com/mirkoxoxo/Mirko-Angeles/main/se√±or_bigotes_final.png", "fecha": "03/07/2024"},
    {"titulo": "Canchitas por Samuel üçø", "descripcion": "**OFERTA EXCLUSIVA**: Mostrando la p√°gina de *Cerkita Web* disfrutar√°s de un 30% de descuento en todas nuestras deliciosas canchitas, tanto dulces como saladas. ¬°Aprovecha esta oportunidad üòâ para saborear tus favoritas a un precio de locura!", "imagen": "https://raw.githubusercontent.com/mirkoxoxo/Mirko-Angeles/main/canchitas_final.png", "fecha": "03/07/2024"},
    {"titulo": "Camil√≥n üå≠", "descripcion": "**OFERTA EXCLUSIVA**: Mostrando la p√°gina de *Cerkita Web* acceder√°s a un 20% de descuento en toda nuestra carta, la cual incluye hamburguesas jugosas, salchipapas crujientes, pollo broaster irresistible y mucho m√°s. üò± ¬°Disfruta de tu antojo favorito a un precio incre√≠ble! üòé", "imagen": "https://raw.githubusercontent.com/mirkoxoxo/Mirko-Angeles/main/camil√≥n_final.png", "fecha": "03/07/2024"}
]

df_promociones = pd.DataFrame(promociones) # Crear un DataFrame a partir de la lista de diccionarios

st.write("### Promociones ¬°ü§ë!") # T√≠tulo de la secci√≥n de promociones

for index, promocion in df_promociones.iterrows():
    st.image(promocion['imagen'], width=500) # Mostrar la imagen de la promoci√≥n
    st.write(f"**{promocion['titulo']}**") # Mostrar el t√≠tulo de la promoci√≥n
    st.write(promocion['descripcion']) # Mostrar la descripci√≥n de la promoci√≥n
    st.write(f"*Fecha: {promocion['fecha']}*") # Mostrar la fecha de la promoci√≥n
    st.write("---") # Separador entre las promociones

# Paso 6: Crear la secci√≥n cierre de la web (logo de la marca)
st.markdown(
    """
    <div class="footer">
        <img src="data:image/png;base64,{}" class="logo">
    </div>
    """.format(st.image("/Users/mirkoxoxo/Documents/Cerkita/cerkitaweb_logo.png", use_column_width=True)),
    unsafe_allow_html=True
) # Mostrar el logo de la marca
